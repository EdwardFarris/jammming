{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","React","Component","Track","addTrack","removeTrack","isRemoval","onClick","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","App","playlistName","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","uri","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8536115.chunk.js","sourcesContent":["import React from 'react';\n\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            term: ''\n        }\n\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n\n    search() {\nthis.props.onSearch(this.state.term);\n    }\n\n    handleTermChange(event) {\nthis.setState({term: event.target.value});\n    }\n\n    render() {\n        return (\n        <div className=\"SearchBar\">\n  <input placeholder=\"Enter A Song, Album, or Artist\" \n        onChange={this.handleTermChange} />\n  <button className=\"SearchButton\">SEARCH</button>\n</div>\n        );\n    }\n}\n\nexport default SearchBar;","import React from 'react';\n\nimport './Track.css';\n\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    renderAction() {\n        if(this.props.isRemoval) {\nreturn <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n        }else {\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n        }\n    }\n    \naddTrack() {\n    this.props.onAdd(this.props.track);\n}\n\nremoveTrack() {\n    this.props.onRemove(this.props.track)\n}\n    render() {\n        return (\n        <div className=\"Track\">\n  <div className=\"Track-information\">\n    <h3>{this.props.track.name}</h3>\n    <p>{this.props.track.artist}  |  {this.props.track.album} </p>\n  </div>\n  {this.renderAction()}\n</div>\n        )\n    }\n}\n\nexport default Track;","import React from \"react\";\n\nimport \"./TrackList.css\";\n\nimport Track from \"../Track/Track\";\n\nclass TrackList extends React.Component {\n  render() {\n    return (\n      <div >\n        {this.props.tracks.map(track => {\n          return <Track track={track} \n                        key={track.id} \n                        onAdd={this.props.onAdd} \n                        onRemove={this.props.onRemove} \n                        isRemoval={this.props.isRemoval}/>\n        })}\n      </div>\n    );\n  }\n}\n\nexport default TrackList;\n","import React from 'react';\n\nimport './SearchResults.css';\n\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n    render() {\n        return (\n        <div className=\"SearchResults\">\n  <h2>Results</h2>\n  <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\n</div>\n        );\n    }\n}\n\nexport default SearchResults;","import React from 'react';\n\nimport './Playlist.css';\n\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\nconstructor(props) {\n  super(props);\n\n  this.handleNameChange = this.handleNameChange.bind(this);\n}\n  handleNameChange(event) {\nthis.props.onNameChange(event.target.value)\n}\n\n    render() {\n      return (\n<div className=\"Playlist\">\n  <input defaultValue={'New Playlist'} onChange={this.handleNameChange}/>\n  <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true}/>\n  <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n</div>\n      );\n    }\n}\n\nexport default Playlist;","import React from 'react';\n\nimport './App.css';\n\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\n\nclass App extends React.Component {\nconstructor(props) {\n  super(props);\n\n  this.state = {\n    searchResults: [\n      {name: 'Enter Sandman', artist: 'Metallica', album: 'Black Album', id: 1},\n      {name: 'Wanted Dead or Alive', artist: 'Bon Jovi', album: 'Slippery When Wet', id: 2},\n      {name: 'Buddy Song', artist: 'Peanut Butter', album: 'Such is Life', id: 3}\n      ],\n      \n      playlistName: 'Rock',\n      \n      playlistTracks: [\n        {name: 'song1', artist: 'artist1', album: 'album1', id: 4},\n        {name: 'song2', artist: 'artist2', album: 'album2', id: 5},\n        {name: 'song3', artist: 'artist3', album: 'album3', id: 6},\n      ],\n    }\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n}\n\naddTrack(track) {\nlet tracks = this.state.playlistTracks;\n  if(tracks.find(savedTrack => \n  savedTrack.id === track.id)) {\n  return;\n} \ntracks.push(track);\nthis.setState({playlistTracks: tracks})\n\n}\n\nremoveTrack(track) {\n  let tracks = this.state.playlistTracks;\n  tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n  this.setState({playlistTracks: tracks});\n}\n\nupdatePlaylistName(name) {\nthis.setState({playlistName: name})\n}\n\nsavePlaylist() {\n  const trackURIs = this.state.playlistTracks.map(track => track.uri);\n}\n\nsearch(term) {\nconsole.log(term)\n}\n\n  render() {\n  return (\n    <div>\n  <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n  <div className=\"App\">\n    <SearchBar onSearch={this.search}/>\n    <div className=\"App-playlist\">\n      <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n      <Playlist playlistName={this.state.playlistName} \n                playlistTracks={this.state.playlistTracks}\n                onRemove={this.removeTrack}\n                onNameChange={this.updatePlaylistName}\n                onSave={this.savePlaylist}/>\n    </div>\n  </div>\n</div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}